package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"gqlapi/graph/model"
	"gqlapi/sqlc"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*sqlc.Todo, error) {
	return r.Store.CreateTodo(ctx, sqlc.CreateTodoParams{Title: input.Title, UserID: 1})
}

// SetCompleteTodo is the resolver for the setCompleteTodo field.
func (r *mutationResolver) SetCompleteTodo(ctx context.Context, id int32, done bool) (*sqlc.Todo, error) {
	return r.Store.SetCompletedTodo(ctx, sqlc.SetCompletedTodoParams{ID: id, Completed: done})
}

// DeleteTodo is the resolver for the deleteTodo field.
func (r *mutationResolver) DeleteTodo(ctx context.Context, id int32) (*sqlc.Todo, error) {
	return r.Store.DeleteTodo(ctx, id)
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*sqlc.Todo, error) {
	return r.Store.ListTodos(ctx)
}

// User is the resolver for the user field.
func (r *todoResolver) User(ctx context.Context, obj *sqlc.Todo) (*sqlc.User, error) {
	return r.Store.GetUser(ctx, obj.UserID)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Todo returns TodoResolver implementation.
func (r *Resolver) Todo() TodoResolver { return &todoResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type todoResolver struct{ *Resolver }
